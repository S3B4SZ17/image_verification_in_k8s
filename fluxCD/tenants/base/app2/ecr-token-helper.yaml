---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: app2
  name: ecr-token-helper
rules:
  - apiGroups: [""]
    resources:
      - secrets
      - serviceaccounts
      - serviceaccounts/token
    verbs:
      - 'delete'
      - 'create'
      - 'patch'
      - 'get'
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ecr-token-helper
  namespace: app2
subjects:
  - kind: ServiceAccount
    name: app2-sa
    namespace: app2
roleRef:
  kind: Role
  name: ecr-token-helper
  apiGroup: ""
---    
apiVersion: batch/v1
kind: CronJob
metadata:
  name: ecr-token-helper
  namespace: app2
spec:
  schedule: '0 */10 * * *'
  successfulJobsHistoryLimit: 0
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: app2-sa
          containers:
            - command:
                - /bin/sh
                - -c
                - |-
                  TOKEN=`aws ecr get-login-password --region \$REGION | cut -d' ' -f6`
                  kubectl delete secret -n app2 --ignore-not-found \$SECRET_NAME
                  kubectl create secret docker-registry -n app2 \$SECRET_NAME \
                  --docker-server=\$ECR_REPOSITORY \
                  --docker-username=AWS \
                  --docker-password=\$TOKEN \
                  --namespace=app2
                  kubectl patch serviceaccount app2-sa -p '{"imagePullSecrets":[{"name":"'\$SECRET_NAME'"}]}' -n app2
              env:
                - name: SECRET_NAME
                  value: 'ecr-token'
                - name: REGION
                  value: us-east-1
                - name: ECR_REPOSITORY
                  value: 809870132669.dkr.ecr.us-east-1.amazonaws.com
              image: gtsopour/awscli-kubectl:latest
              imagePullPolicy: IfNotPresent
              name: ecr-token-helper
          restartPolicy: Never