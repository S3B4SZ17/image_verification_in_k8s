---
  name: Create EKS cluster
  
  on:
    workflow_dispatch:
      inputs:
        plan-only:
          description: "Terraform plan only"
          type: boolean
          default: true
        apply-only:
          description: "Terraform apply only"
          type: boolean
          default: false
        destroy_resources:
          required: false
          default: false
          type: boolean
          description: 'Pass this value as true if resources need to destroied'
        terraform_lock_id:
          required: false
          default: ""
          type: string
          description: 'Pass locak id if you have terraform state is locked and it shows error with Lock ID'
  
  env:
    AWS_REGION: "us-east-1"
  
  permissions:
    id-token: write
    contents: read
  
  jobs:
    build:
      name: Create EKS cluster
      runs-on: ubuntu-latest
      steps:
      - name: Check out code
        uses: actions/checkout@v3
  
      - name: Auth to remote tf modules
        run:
          git config --global url."https://${{ secrets.GH_TOKEN }}@github.com".insteadOf "https://github.com"
  
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: "arn:aws:iam::809870132669:role/github-tf-foundational-deploy-role"
          aws-region: ${{env.AWS_REGION }}
  
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
  
      - name: Terraform Init
        id: init
        run: |
            rm -rf .terraform
            terraform init
        working-directory: "./eks_cluster"
  
      - name: Terraform Validation
        id: validate
        run: terraform validate -no-color
        working-directory: "./eks_cluster"
        
      - name: Terraform Plan
        id: plan
        if: ${{ inputs.plan-only == true }}
        run: terraform plan -no-color -out eks_cluster.out
        working-directory: "./eks_cluster"
        continue-on-error: true
        
      - name: Terraform Unlock
        id: unlocak
        if: ${{ inputs.terraform_lock_id != '' }} 
        run: |
          terraform force-unlock -force ${{ inputs.terraform_lock_id }}
      
      - name: Terraform Apply
        if: |
          inputs.apply-only == true  && inputs.plan-only == true
        run: terraform apply -auto-approve eks_cluster.out
        working-directory: "./eks_cluster"
  
      - name: Terraform Destroy
        if: ${{ inputs.destroy_resources == true }}
        run: |
          terraform destroy -auto-approve -input=false
  
      # - name: Configure IRSA role
      #   run: |
      #     bash irsa-config.sh app1
      #     bash irsa-config.sh app2
      #     bash irsa-config.sh connaisseur
      #   working-directory: "./eks_cluster"
  